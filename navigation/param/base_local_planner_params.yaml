TebLocalPlannerROS:

 odom_topic: odom
 map_frame: map

 # Trajectory

 teb_autosize: True                                 # 로봇의 현재 상태와 환경에 따라, 일부 파라미터를 자동으로 조절
 dt_ref: 1.0                                        # 로봇이 이동 경로를 따라 움직일 때, 다음 경로 포인트까지 도달하는 데 걸리는 시간
 dt_hysteresis: 0.01                                # 로봇의 이동 경로에서 미세한 변화가 있을 때, 로봇의 이동 속도를 조절
 max_samples: 500                                   # 로봇의 이동 경로에서 사용되는 포인트의 최대 수를 결정하는 값
 global_plan_overwrite_orientation: True            # 로봇이 따라가는 글로벌 경로(global plan)의 방향을 조정하는 데 사용되는 값
 allow_init_with_backwards_motion: False            # 로봇이 역방향 모션으로 초기화 될 수 있는지 여부를 결정
 max_global_plan_lookahead_dist: 2.0                # 글로벌 경로(global plan)에서 로봇이 볼 수 있는 최대 거리를 제한하는 값
 global_plan_viapoint_sep: 3                        # 글로벌 경로(global plan)상의 경유점(viapoint) 간의 최소 거리를 결정하는 값
 global_plan_prune_distance: 5                      # 글로벌 경로(global plan)상에서 로봇과의 거리가 일정 값 이상인 경로 점들을 제거
 exact_arc_length: True                             # 로봇의 이동 거리를 arc length의 정확한 계산으로 수행할지 여부를 결정
 feasibility_check_no_poses: 5                      # 로봇의 현재 위치를 기준으로, 몇 개의 미래 로봇 위치를 고려하여 경로 추적의 유효성 여부를 판단
 publish_feedback: False                            # teb_local_planner의 feedback 정보를 ROS의 topic으로 publish할지 여부를 결정

 # Robot

 max_vel_x: 0.3                                     # 로봇이 x축 방향으로 이동할 때의 최대 속도 (m/s)
 max_vel_x_backwards: 0.01                          # 로봇이 후진할 때의 최대 속도 (m/s)
 max_vel_y: 0.0                                     # 로봇이 y축 방향으로 이동할 때의 최대 속도 (m/s)
 max_vel_theta: 1.0                                 # 로봇이 회전할 때의 최대 각속도 (rad/s)
 acc_lim_x: 1.0                                     # 로봇이 x축 방향으로 가속도를 변화시킬 때의 제한 값
 acc_lim_theta: 1.0                                 # 로봇이 회전할 때 최대로 허용되는 각 가속도를 결정
 min_turning_radius: 0.4                            # 로봇이 회전할 때 최소한으로 필요한 회전 반경

 footprint_model:
   type: "polygon"
   vertices: [[-0.2245, -0.175], [-0.2245, 0.175], [0.2245, 0.175], [0.2245, -0.175]]

 # GoalTolerance

 xy_goal_tolerance: 0.1                             # 목표 지점까지의 거리 허용 오차
 yaw_goal_tolerance: 0.1                            # 목표 지점까지의 회전 허용 오차
 free_goal_vel: False                               # 목표 지점까지 이동할 때 로봇의 최대 속도
 complete_global_plan: False                        # 전역 경로를 따라 이동할 때 완전한 경로를 따라야 하는지 여부를 결정

 # Obstacles

 min_obstacle_dist: 0.4                             # 주어진 로봇의 현재 상태에서 허용되는 최소 장애물 거리(m)
 inflation_dist: 0.1                                # footprint_model을 기반으로 장애물을 팽창시키는 거리
 include_costmap_obstacles: True                    # 로봇 경로 계획에 costmap에서 장애물을 고려할지 여부를 결정
 costmap_obstacles_behind_robot_dist: 1.0           # 주어진 거리만큼 로봇 뒤쪽에 있는 장애물도 고려하여 적용되는 맵을 생성(m)
 obstacle_poses_affected: 0.15                      # 장애물의 포즈를 업데이트하기 위한 거리 임계값을 설정(m)

 dynamic_obstacle_inflation_dist: 0.15              # 동적 장애물 주위의 팽창 거리(m)
 include_dynamic_obstacles: True                    # 로봇 주변의 동적 장애물을 고려할 지 여부를 설정

 costmap_converter_plugin: ""                       # 플러그인
 costmap_converter_spin_thread: True                # costmap_converter의 스핀 함수를 호출하는 스레드를 생성
 costmap_converter_rate: 10                         # costmap_converter 라이브러리를 사용하여 2D costmap을 다른 형식으로 변환하는 노드의 주기를 설정


 # Optimization

 no_inner_iterations: 10                            # local planner에서 경로 생성을 위해 사용하는 다양한 최적화 알고리즘의 내부 반복 횟수를 결정
 no_outer_iterations: 10                            # 최적화 과정에서 수행할 외부 반복 횟수를 결정
 optimization_activate: True                        # 현재 로봇 상태 및 환경 요소를 고려하여 궤적의 타이밍과 형태를 최적화
 optimization_verbose: False                        # 디버그 메시지 출력 여부
 penalty_epsilon: 0.0001                            # 근사 최적화에 사용되는 파라미터
 obstacle_cost_exponent: 2                          # 장애물의 접근성을 제어하는 데 사용
 weight_max_vel_x: 1                                # 비용함수에서 max_vel_x를 곱하는 가중치
 weight_max_vel_theta: 1                            # 비용함수에서 max_vel_theta를 곱하는 가중치
 weight_acc_lim_x: 1                                # 비용함수에서 acc_lim_x를 곱하는 가중치
 weight_acc_lim_theta: 1                            # 비용함수에서 acc_lim_theta를 곱하는 가중치
 weight_kinematics_nh: 200                          # 로봇의 이동 가능한 공간을 고려하여 비용 맵을 생성하는 데 사용
 weight_kinematics_forward_drive: 1                 # 로봇이 앞으로 전진하는 운동을 하는데 있어서의 제약을 나타내는 값
 weight_kinematics_turning_radius: 1                # 이동 로봇의 회전 반경에 대한 비용 가중치
 weight_optimaltime: 1 # must be > 0                # 전체 비용함수에서 최적 도착시간을 고려하는 비용의 가중치
 weight_shortest_path: 3                            # 로봇의 경로가 최단 경로에 얼마나 가까운지에 대한 가중치
 weight_obstacle: 2000                              # 경로 상의 장애물에 대한 비용 가중치
 weight_inflation: 0.2                              # inflation_layer에서 계산된 가중치에 대한 상대적인 중요도를 지정하는 값
 weight_dynamic_obstacle: 10                        # 적 장애물을 피하기 위한 가중치(weight) 값
 weight_dynamic_obstacle_inflation: 0.2             # 동적 장애물의 주변에 인플레이션을 추가할 때 사용되는 가중치
 weight_viapoint: 2                                 # 경로에서 지나야 하는 ViaPoint의 가중치
 weight_adapt_factor: 1                             # 경로 계획에 사용되는 가중치

 # Homotopy Class Planner

 enable_homotopy_class_planning: True               # 경로 탐색 시 다양한 경로를 생성하여 최적 경로를 선택할 수 있는 옵션
 enable_multithreading: True                        # 글로벌 플래너에서 멀티스레딩을 사용할지 여부를 결정
 max_number_classes: 8                              # Homotopy Class Planner에서 생성할 수 있는 호모토피 클래스(Homotopy Class)의 최대 수
 selection_cost_hysteresis: 1.0                     # homotopy 클래스를 선택할 때 사용되는 임계값
 selection_prefer_initial_plan: 0.9                 # homotopy 클래스 경로 탐색을 수행할 때 이전 경로가 새 경로보다 비용이 더 낮은 경우 이전 경로를 선호할지 여부를 설정
 selection_obst_cost_scale: 100.0                   # 경로 선택 중 장애물 비용 스케일링 인자로, 현재 경로와 비교하여 장애물 비용의 크기 조정에 사용
 selection_alternative_time_cost: False             # alternative time cost heuristic의 비율을 조절
 roadmap_graph_no_samples: 15                       # 로드맵 생성 시 샘플링할 무작위 구성 요소의 수
 roadmap_graph_area_width: 5                        # roadmap 그래프를 생성할 때 사용하는 영역의 너비
 roadmap_graph_area_length_scale: 1.0               # roadmap_graph_area_width와 함께 조정하여 사용하며, 영역의 크기와 밀도를 설정하는 데 중요한 역할
 h_signature_prescaler: 1.0                         # H signature 계산에 사용되는 지도의 해상도를 줄이는 정도를 결정
 h_signature_threshold: 0.1                         # signature가 비슷한지 여부를 판단할 때 사용
 obstacle_heading_threshold: 0.45                   # 목표지점과 장애물 간의 각도를 라디안 단위로 지정하여 장애물을 회피할 수 있는 경로를 생성
 switching_blocking_period: 1.0                     # 경로 계획 중 현재 경로를 바꾸는 데 소요되는 시간 간격
 viapoints_all_candidates: True                     # 차량 경로 계획을 위해 고려되는 경유점(via point) 후보의 선택 방법을 결정
 delete_detours_backwards: False                    # 비용 맵에서 삭제되는 구간을 조절하는데 사용
 max_ratio_detours_duration_best_duration: 1.5      # 현재 계획 중인 경로의 소요 시간과 비교하여 대안 경로의 소요 시간이 얼마나 길어지면 이 대안 경로를 버릴 것인지를 결정하는 비율
 visualize_hc_graph: True                           # global planner node에서 visualization_msgs/MarkerArray 타입으로 homotopy class 그래프를 publish하는 옵션
 visualize_with_time_as_z_axis_scale: False         # 3차원 경로 시각화 시 시간 차원을 Z축으로 표시할 때, Z축 스케일을 어떻게 지정할 것인지를 결정

# Recovery
 
 shrink_horizon_backup: True                        # 현재 위치로부터 미래 일정 거리 이내에 위치한 이전 궤적의 일부분을 백업으로 남겨둔 다음 해당 백업 경로부터 재시작하여 새로운 경로를 탐색하는데 사용
 shrink_horizon_min_duration: 5                     # 축소된 경로를 따라가는 동안의 최소 기간을 설정
 oscillation_recovery: True                         # 경로 계획자가 전환 할 수있는 경로 계획을 더 이상 찾을 수 없거나 이전 경로와 유사한 경로를 반복적으로 찾아 들어가는 경우, 이전 경로로 돌아가도록 계획하는 기능
 oscillation_v_eps: 0.1                             # local planner가 경로 추적 중 로봇이 제자리에 멈추거나 이동 속도가 너무 느려질 때 발생하는 진동 문제를 방지하는 데 사용
 oscillation_omega_eps: 0.1                         # 이전 경로와 현재 경로 간의 회전 속도 차이가 임계값보다 작을 때 회전 움직임이 오실레이션 현상으로 간주되는 것을 방지하기 위한 값
 oscillation_recovery_min_duration: 3               # 이전 목적지로부터 새로운 목적지로의 계획이 실패했을 때 로봇이 진동하는 것을 막기 위한 파라미터 중 하나
 oscillation_filter_duration: 10                    # 플래너에서 최적 경로를 찾기 위한 과정에서 생성된 경로를 고르게 만들기 위해 사용되는 필터링 기법
 is_oscillating: True